<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>15s Video Recorder</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-900 text-white flex items-center justify-center min-h-screen">
  <div class="text-center px-4">
    <video id="preview" autoplay playsinline muted class="w-full max-w-md mx-auto mb-4 rounded-lg border-2 border-gray-700"></video>
    <button id="startBtn" class="bg-blue-500 hover:bg-blue-600 px-6 py-2 rounded text-white font-bold mb-4">🎥 Start 15s Recording</button>
    <a id="downloadLink" class="hidden mt-2 block text-green-400 underline font-semibold">⬇️ Download WebM Video</a>
    <p id="status" class="mt-2 text-sm text-gray-300 hidden">Recording...</p>
  </div>

  <script>
    const preview = document.getElementById('preview');
    const startBtn = document.getElementById('startBtn');
    const downloadLink = document.getElementById('downloadLink');
    const status = document.getElementById('status');

    let mediaStream;
    let recorder;
    let recordedChunks = [];

    async function startCameraWithFlash() {
      try {
        mediaStream = await navigator.mediaDevices.getUserMedia({
          video: {
            facingMode: { exact: "environment" },
            width: { ideal: 1920 },
            height: { ideal: 1080 },
            advanced: [{ torch: true }]
          },
          audio: false // NO AUDIO
        });

        // Try to enable flashlight if supported
        const videoTrack = mediaStream.getVideoTracks()[0];
        const capabilities = videoTrack.getCapabilities();
        if (capabilities.torch) {
          await videoTrack.applyConstraints({ advanced: [{ torch: true }] });
        }

        preview.srcObject = mediaStream;
      } catch (err) {
        alert("Camera error: " + err.message);
        console.error(err);
      }
    }

    async function startRecording() {
      recordedChunks = [];
      status.textContent = "⏳ Recording...";
      status.classList.remove('hidden');
      downloadLink.classList.add('hidden');

      recorder = new MediaRecorder(mediaStream, {
        mimeType: 'video/webm;codecs=vp9'
      });

      recorder.ondataavailable = e => {
        if (e.data.size > 0) recordedChunks.push(e.data);
      };

      recorder.onstop = () => {
        const blob = new Blob(recordedChunks, { type: 'video/webm' });
        const url = URL.createObjectURL(blob);
        downloadLink.href = url;
        downloadLink.download = 'video.webm';
        downloadLink.classList.remove('hidden');
        status.textContent = "✅ Done! Tap to download.";
      };

      recorder.start();

      setTimeout(() => {
        recorder.stop();
        mediaStream.getTracks().forEach(track => track.stop());
      }, 15000); // 15 seconds
    }

    startBtn.addEventListener('click', async () => {
      await startCameraWithFlash();
      await startRecording();
    });
  </script>
</body>
</html>
